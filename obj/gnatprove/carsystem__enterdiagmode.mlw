module Carsystem__batterychargerange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type batterychargerange = <range 0 100>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (100 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = batterychargerange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type batterychargerange__ref = {
                                mutable batterychargerange__content :
                                  batterychargerange
                                }
  
  function batterychargerange__ref_batterychargerange__content__projection (a: batterychargerange__ref) : batterychargerange =
    a.batterychargerange__content
  
  meta "model_projection" function batterychargerange__ref_batterychargerange__content__projection
  
  meta "inline:no" function batterychargerange__ref_batterychargerange__content__projection
  
  val batterychargerange__havoc (x: batterychargerange__ref) : unit
    writes { x }
end

module Carsystem__batterychargerange__rep
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Carsystem__batterychargerange.batterychargerange) : int =
    Carsystem__batterychargerange.batterychargerange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Carsystem__batterychargerange.batterychargerange,
    predicate in_range = Carsystem__batterychargerange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Carsystem__speedrange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type speedrange = <range 0 100>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (100 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = speedrange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type speedrange__ref = { mutable speedrange__content : speedrange }
  
  function speedrange__ref_speedrange__content__projection (a: speedrange__ref) : speedrange =
    a.speedrange__content
  
  meta "model_projection" function speedrange__ref_speedrange__content__projection
  
  meta "inline:no" function speedrange__ref_speedrange__content__projection
  
  val speedrange__havoc (x: speedrange__ref) : unit
    writes { x }
end

module Carsystem__speedrange__rep
  use Carsystem__speedrange as Carsystem__speedrange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Carsystem__speedrange.speedrange) : int =
    Carsystem__speedrange.speedrange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Carsystem__speedrange.speedrange,
    predicate in_range = Carsystem__speedrange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Carsystem__gearrange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type gearrange = <range 0 2>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = gearrange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type gearrange__ref = { mutable gearrange__content : gearrange }
  
  function gearrange__ref_gearrange__content__projection (a: gearrange__ref) : gearrange =
    a.gearrange__content
  
  meta "model_projection" function gearrange__ref_gearrange__content__projection
  
  meta "inline:no" function gearrange__ref_gearrange__content__projection
  
  val gearrange__havoc (x: gearrange__ref) : unit
    writes { x }
end

module Carsystem__gearrange__rep
  use Carsystem__gearrange as Carsystem__gearrange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Carsystem__gearrange.gearrange) : int =
    Carsystem__gearrange.gearrange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Carsystem__gearrange.gearrange,
    predicate in_range = Carsystem__gearrange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Carsystem__car__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  use Carsystem__batterychargerange__rep as Carsystem__batterychargerange__rep
  use Carsystem__speedrange as Carsystem__speedrange
  use Carsystem__speedrange__rep as Carsystem__speedrange__rep
  use Carsystem__gearrange as Carsystem__gearrange
  use Carsystem__gearrange__rep as Carsystem__gearrange__rep
  
  type __split_fields = {
                       rec__carsystem__car__isstarted : bool;
                       rec__carsystem__car__sensordetect : bool;
                       rec__carsystem__car__isdiagmode : bool;
                       rec__carsystem__car__isbatterywarning : bool;
                       rec__carsystem__car__speed :
                         Carsystem__speedrange.speedrange;
                       rec__carsystem__car__desiredspeed :
                         Carsystem__speedrange.speedrange;
                       rec__carsystem__car__battery :
                         Carsystem__batterychargerange.batterychargerange;
                       rec__carsystem__car__gear :
                         Carsystem__gearrange.gearrange
                       }
  
  function __split_fields_rec__carsystem__car__isstarted__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__isstarted
  
  meta "model_projection" function __split_fields_rec__carsystem__car__isstarted__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__isstarted__projection
  
  function __split_fields_rec__carsystem__car__sensordetect__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__sensordetect
  
  meta "model_projection" function __split_fields_rec__carsystem__car__sensordetect__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__sensordetect__projection
  
  function __split_fields_rec__carsystem__car__isdiagmode__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__isdiagmode
  
  meta "model_projection" function __split_fields_rec__carsystem__car__isdiagmode__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__isdiagmode__projection
  
  function __split_fields_rec__carsystem__car__isbatterywarning__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__isbatterywarning
  
  meta "model_projection" function __split_fields_rec__carsystem__car__isbatterywarning__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__isbatterywarning__projection
  
  function __split_fields_rec__carsystem__car__speed__projection (a: __split_fields) : 
    Carsystem__speedrange.speedrange =
    a.rec__carsystem__car__speed
  
  meta "model_projection" function __split_fields_rec__carsystem__car__speed__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__speed__projection
  
  function __split_fields_rec__carsystem__car__desiredspeed__projection (a: __split_fields) : 
    Carsystem__speedrange.speedrange =
    a.rec__carsystem__car__desiredspeed
  
  meta "model_projection" function __split_fields_rec__carsystem__car__desiredspeed__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__desiredspeed__projection
  
  function __split_fields_rec__carsystem__car__battery__projection (a: __split_fields) : 
    Carsystem__batterychargerange.batterychargerange =
    a.rec__carsystem__car__battery
  
  meta "model_projection" function __split_fields_rec__carsystem__car__battery__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__battery__projection
  
  function __split_fields_rec__carsystem__car__gear__projection (a: __split_fields) : 
    Carsystem__gearrange.gearrange =
    a.rec__carsystem__car__gear
  
  meta "model_projection" function __split_fields_rec__carsystem__car__gear__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__gear__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate carsystem__car__isstarted__pred (a: __rep) = true
  
  val carsystem__car__isstarted__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__isstarted__pred (a : __rep)) }
  
  val rec__carsystem__car__isstarted_ (a: __rep) : bool
    requires { carsystem__car__isstarted__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__isstarted)) }
  
  predicate carsystem__car__sensordetect__pred (a: __rep) = true
  
  val carsystem__car__sensordetect__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__sensordetect__pred (a : __rep)) }
  
  val rec__carsystem__car__sensordetect_ (a: __rep) : bool
    requires { carsystem__car__sensordetect__pred a }
    ensures { (result
                 = ((__split_fields a).rec__carsystem__car__sensordetect)) }
  
  predicate carsystem__car__isdiagmode__pred (a: __rep) = true
  
  val carsystem__car__isdiagmode__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__isdiagmode__pred (a : __rep)) }
  
  val rec__carsystem__car__isdiagmode_ (a: __rep) : bool
    requires { carsystem__car__isdiagmode__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__isdiagmode)) }
  
  predicate carsystem__car__isbatterywarning__pred (a: __rep) = true
  
  val carsystem__car__isbatterywarning__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__isbatterywarning__pred (a : __rep)) }
  
  val rec__carsystem__car__isbatterywarning_ (a: __rep) : bool
    requires { carsystem__car__isbatterywarning__pred a }
    ensures { (result
                 = ((__split_fields a).rec__carsystem__car__isbatterywarning)) }
  
  predicate carsystem__car__speed__pred (a: __rep) = true
  
  val carsystem__car__speed__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__speed__pred (a : __rep)) }
  
  val rec__carsystem__car__speed_ (a: __rep) : Carsystem__speedrange.speedrange
    requires { carsystem__car__speed__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__speed)) }
  
  predicate carsystem__car__desiredspeed__pred (a: __rep) = true
  
  val carsystem__car__desiredspeed__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__desiredspeed__pred (a : __rep)) }
  
  val rec__carsystem__car__desiredspeed_ (a: __rep) : Carsystem__speedrange.speedrange
    requires { carsystem__car__desiredspeed__pred a }
    ensures { (result
                 = ((__split_fields a).rec__carsystem__car__desiredspeed)) }
  
  predicate carsystem__car__battery__pred (a: __rep) = true
  
  val carsystem__car__battery__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__battery__pred (a : __rep)) }
  
  val rec__carsystem__car__battery_ (a: __rep) : Carsystem__batterychargerange.batterychargerange
    requires { carsystem__car__battery__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__battery)) }
  
  predicate carsystem__car__gear__pred (a: __rep) = true
  
  val carsystem__car__gear__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__gear__pred (a : __rep)) }
  
  val rec__carsystem__car__gear_ (a: __rep) : Carsystem__gearrange.gearrange
    requires { carsystem__car__gear__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__gear)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Boolean.to_int ((__split_fields a).rec__carsystem__car__isstarted))
            = (Boolean.to_int
                 ((__split_fields b).rec__carsystem__car__isstarted))) /\
           ((Boolean.to_int
               ((__split_fields a).rec__carsystem__car__sensordetect))
              = (Boolean.to_int
                   ((__split_fields b).rec__carsystem__car__sensordetect)))) /\
          (((((Boolean.to_int
                 ((__split_fields a).rec__carsystem__car__isdiagmode))
                = (Boolean.to_int
                     ((__split_fields b).rec__carsystem__car__isdiagmode))) /\
               ((Boolean.to_int
                   ((__split_fields a).rec__carsystem__car__isbatterywarning))
                  = (Boolean.to_int
                       ((__split_fields b).rec__carsystem__car__isbatterywarning)))) /\
              ((Carsystem__speedrange__rep.to_rep
                  ((__split_fields a).rec__carsystem__car__speed))
                 = (Carsystem__speedrange__rep.to_rep
                      ((__split_fields b).rec__carsystem__car__speed)))) /\
             ((((Carsystem__speedrange__rep.to_rep
                   ((__split_fields a).rec__carsystem__car__desiredspeed))
                  = (Carsystem__speedrange__rep.to_rep
                       ((__split_fields b).rec__carsystem__car__desiredspeed))) /\
                 ((Carsystem__batterychargerange__rep.to_rep
                     ((__split_fields a).rec__carsystem__car__battery))
                    = (Carsystem__batterychargerange__rep.to_rep
                         ((__split_fields b).rec__carsystem__car__battery)))) /\
                ((Carsystem__gearrange__rep.to_rep
                    ((__split_fields a).rec__carsystem__car__gear))
                   = (Carsystem__gearrange__rep.to_rep
                        ((__split_fields b).rec__carsystem__car__gear)))))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Carsystem__car
  use export Carsystem__car__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type car = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function carsystem__car__isstarted__first__bit : int
  
  val function carsystem__car__isstarted__last__bit : int
  
  val function carsystem__car__isstarted__position : int
  
  axiom carsystem__car__isstarted__first__bit_axiom:
    (carsystem__car__isstarted__first__bit >= (0 : int))
  
  axiom carsystem__car__isstarted__last__bit_axiom:
    (carsystem__car__isstarted__last__bit
       > carsystem__car__isstarted__first__bit)
  
  axiom carsystem__car__isstarted__position_axiom:
    (carsystem__car__isstarted__position >= (0 : int))
  
  val function carsystem__car__sensordetect__first__bit : int
  
  val function carsystem__car__sensordetect__last__bit : int
  
  val function carsystem__car__sensordetect__position : int
  
  axiom carsystem__car__sensordetect__first__bit_axiom:
    (carsystem__car__sensordetect__first__bit >= (0 : int))
  
  axiom carsystem__car__sensordetect__last__bit_axiom:
    (carsystem__car__sensordetect__last__bit
       > carsystem__car__sensordetect__first__bit)
  
  axiom carsystem__car__sensordetect__position_axiom:
    (carsystem__car__sensordetect__position >= (0 : int))
  
  val function carsystem__car__isdiagmode__first__bit : int
  
  val function carsystem__car__isdiagmode__last__bit : int
  
  val function carsystem__car__isdiagmode__position : int
  
  axiom carsystem__car__isdiagmode__first__bit_axiom:
    (carsystem__car__isdiagmode__first__bit >= (0 : int))
  
  axiom carsystem__car__isdiagmode__last__bit_axiom:
    (carsystem__car__isdiagmode__last__bit
       > carsystem__car__isdiagmode__first__bit)
  
  axiom carsystem__car__isdiagmode__position_axiom:
    (carsystem__car__isdiagmode__position >= (0 : int))
  
  val function carsystem__car__isbatterywarning__first__bit : int
  
  val function carsystem__car__isbatterywarning__last__bit : int
  
  val function carsystem__car__isbatterywarning__position : int
  
  axiom carsystem__car__isbatterywarning__first__bit_axiom:
    (carsystem__car__isbatterywarning__first__bit >= (0 : int))
  
  axiom carsystem__car__isbatterywarning__last__bit_axiom:
    (carsystem__car__isbatterywarning__last__bit
       > carsystem__car__isbatterywarning__first__bit)
  
  axiom carsystem__car__isbatterywarning__position_axiom:
    (carsystem__car__isbatterywarning__position >= (0 : int))
  
  val function carsystem__car__speed__first__bit : int
  
  val function carsystem__car__speed__last__bit : int
  
  val function carsystem__car__speed__position : int
  
  axiom carsystem__car__speed__first__bit_axiom:
    (carsystem__car__speed__first__bit >= (0 : int))
  
  axiom carsystem__car__speed__last__bit_axiom:
    (carsystem__car__speed__last__bit > carsystem__car__speed__first__bit)
  
  axiom carsystem__car__speed__position_axiom:
    (carsystem__car__speed__position >= (0 : int))
  
  val function carsystem__car__desiredspeed__first__bit : int
  
  val function carsystem__car__desiredspeed__last__bit : int
  
  val function carsystem__car__desiredspeed__position : int
  
  axiom carsystem__car__desiredspeed__first__bit_axiom:
    (carsystem__car__desiredspeed__first__bit >= (0 : int))
  
  axiom carsystem__car__desiredspeed__last__bit_axiom:
    (carsystem__car__desiredspeed__last__bit
       > carsystem__car__desiredspeed__first__bit)
  
  axiom carsystem__car__desiredspeed__position_axiom:
    (carsystem__car__desiredspeed__position >= (0 : int))
  
  val function carsystem__car__battery__first__bit : int
  
  val function carsystem__car__battery__last__bit : int
  
  val function carsystem__car__battery__position : int
  
  axiom carsystem__car__battery__first__bit_axiom:
    (carsystem__car__battery__first__bit >= (0 : int))
  
  axiom carsystem__car__battery__last__bit_axiom:
    (carsystem__car__battery__last__bit
       > carsystem__car__battery__first__bit)
  
  axiom carsystem__car__battery__position_axiom:
    (carsystem__car__battery__position >= (0 : int))
  
  val function carsystem__car__gear__first__bit : int
  
  val function carsystem__car__gear__last__bit : int
  
  val function carsystem__car__gear__position : int
  
  axiom carsystem__car__gear__first__bit_axiom:
    (carsystem__car__gear__first__bit >= (0 : int))
  
  axiom carsystem__car__gear__last__bit_axiom:
    (carsystem__car__gear__last__bit > carsystem__car__gear__first__bit)
  
  axiom carsystem__car__gear__position_axiom:
    (carsystem__car__gear__position >= (0 : int))
  
  val function user_eq (a: car) (b: car) : bool
  
  val function dummy : car
  
  type car__ref = { mutable car__content : car }
  
  function car__ref_car__content__projection (a: car__ref) : car =
    a.car__content
  
  meta "model_projection" function car__ref_car__content__projection
  
  meta "inline:no" function car__ref_car__content__projection
  
  val car__havoc (x: car__ref) : unit
    writes { x }
end

module Carsystem__car___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Carsystem__car as Carsystem__car
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  use Carsystem__batterychargerange__rep as Carsystem__batterychargerange__rep
  use Carsystem__speedrange as Carsystem__speedrange
  use Carsystem__speedrange__rep as Carsystem__speedrange__rep
  use Carsystem__gearrange as Carsystem__gearrange
  use Carsystem__gearrange__rep as Carsystem__gearrange__rep
  
  predicate dynamic_invariant (temp___expr_188: Carsystem__car.car) (temp___is_init_184: bool) (temp___skip_constant_185: bool) (temp___do_toplevel_186: bool) (temp___do_typ_inv_187: bool) =
    true
  
  val dynamic_invariant (temp___expr_188: Carsystem__car.car) (temp___is_init_184: bool) (temp___skip_constant_185: bool) (temp___do_toplevel_186: bool) (temp___do_typ_inv_187: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_188 : Carsystem__car.car))
                      (temp___is_init_184 : bool))
                     (temp___skip_constant_185 : bool))
                    (temp___do_toplevel_186 : bool))
                   (temp___do_typ_inv_187 : bool)) }
  
  predicate default_initial_assumption (temp___expr_189: Carsystem__car.car) (temp___skip_top_level_190: bool) =
    (((if (Carsystem__car.carsystem__car__isstarted__pred temp___expr_189) then
         (((Carsystem__car.__split_fields temp___expr_189).Carsystem__car.rec__carsystem__car__isstarted)
            = (Boolean.of_int (0 : int)))
       else true) /\
        (if (Carsystem__car.carsystem__car__sensordetect__pred
               temp___expr_189) then
           (((Carsystem__car.__split_fields temp___expr_189).Carsystem__car.rec__carsystem__car__sensordetect)
              = (Boolean.of_int (0 : int)))
         else true)) /\
       ((((if (Carsystem__car.carsystem__car__isdiagmode__pred
                 temp___expr_189) then
             (((Carsystem__car.__split_fields temp___expr_189).Carsystem__car.rec__carsystem__car__isdiagmode)
                = (Boolean.of_int (0 : int)))
           else true) /\
            (if (Carsystem__car.carsystem__car__isbatterywarning__pred
                   temp___expr_189) then
               (((Carsystem__car.__split_fields temp___expr_189).Carsystem__car.rec__carsystem__car__isbatterywarning)
                  = (Boolean.of_int (0 : int)))
             else true)) /\
           (if (Carsystem__car.carsystem__car__speed__pred temp___expr_189) then
              ((Carsystem__speedrange__rep.to_rep
                  ((Carsystem__car.__split_fields temp___expr_189).Carsystem__car.rec__carsystem__car__speed))
                 = (0 : int))
            else true)) /\
          (((if (Carsystem__car.carsystem__car__desiredspeed__pred
                   temp___expr_189) then
               ((Carsystem__speedrange__rep.to_rep
                   ((Carsystem__car.__split_fields temp___expr_189).Carsystem__car.rec__carsystem__car__desiredspeed))
                  = (0 : int))
             else true) /\
              (if (Carsystem__car.carsystem__car__battery__pred
                     temp___expr_189) then
                 ((Carsystem__batterychargerange__rep.to_rep
                     ((Carsystem__car.__split_fields temp___expr_189).
                        Carsystem__car.rec__carsystem__car__battery))
                    = (0 : int))
               else true)) /\
             (if (Carsystem__car.carsystem__car__gear__pred temp___expr_189) then
                ((Carsystem__gearrange__rep.to_rep
                    ((Carsystem__car.__split_fields temp___expr_189).
                       Carsystem__car.rec__carsystem__car__gear))
                   = (0 : int))
              else true))))
  
  val default_initial_assumption (temp___expr_189: Carsystem__car.car) (temp___skip_top_level_190: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_189 : Carsystem__car.car))
                   (temp___skip_top_level_190 : bool)) }
end

module Carsystem__emergencystop___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__car as Carsystem__car
  use Carsystem__car___axiom as Carsystem__car___axiom
  use Carsystem__speedrange as Carsystem__speedrange
  use Carsystem__speedrange__rep as Carsystem__speedrange__rep
  
  val emergencystop (this__split_fields: Carsystem__car.__split_fields__ref) : 
    unit
    requires { true }
    writes { this__split_fields }
    ensures { (([@GP_Pretty_Ada:12485]
                ((Carsystem__speedrange__rep.to_rep
                    ((Carsystem__car.__split_fields
                         { Carsystem__car.__split_fields =
                             (Carsystem__car.__split_fields__content
                                 this__split_fields) }).Carsystem__car.rec__carsystem__car__speed))
                   = (0 : int))) /\
                 (((((Carsystem__car___axiom.dynamic_invariant
                        { Carsystem__car.__split_fields =
                            (Carsystem__car.__split_fields__content
                                this__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Carsystem__enterdiagmode__this
  use _gnatprove_standard.Main
  use int.Int
  use Carsystem__car as Carsystem__car
  
  val this__split_fields : Carsystem__car.__split_fields__ref
end

module Carsystem__batterychargerange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  
  predicate dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) =
    if ((temp___is_init_163 = True) \/
          (Carsystem__batterychargerange.first
             <= Carsystem__batterychargerange.last)) then
      (((Carsystem__batterychargerange.dynamic_property
           Carsystem__batterychargerange.first)
          Carsystem__batterychargerange.last)
         temp___expr_167)
    else true
  
  val dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_167 : int))
                      (temp___is_init_163 : bool))
                     (temp___skip_constant_164 : bool))
                    (temp___do_toplevel_165 : bool))
                   (temp___do_typ_inv_166 : bool)) }
  
  predicate default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) =
    true
  
  val default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_168 : int))
                   (temp___skip_top_level_169 : bool)) }
end

module Carsystem__speedrange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__speedrange as Carsystem__speedrange
  
  predicate dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) =
    if ((temp___is_init_170 = True) \/
          (Carsystem__speedrange.first <= Carsystem__speedrange.last)) then
      (((Carsystem__speedrange.dynamic_property Carsystem__speedrange.first)
          Carsystem__speedrange.last)
         temp___expr_174)
    else true
  
  val dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_174 : int))
                      (temp___is_init_170 : bool))
                     (temp___skip_constant_171 : bool))
                    (temp___do_toplevel_172 : bool))
                   (temp___do_typ_inv_173 : bool)) }
  
  predicate default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) =
    true
  
  val default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_175 : int))
                   (temp___skip_top_level_176 : bool)) }
end

module Carsystem__gearrange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__gearrange as Carsystem__gearrange
  
  predicate dynamic_invariant (temp___expr_181: int) (temp___is_init_177: bool) (temp___skip_constant_178: bool) (temp___do_toplevel_179: bool) (temp___do_typ_inv_180: bool) =
    if ((temp___is_init_177 = True) \/
          (Carsystem__gearrange.first <= Carsystem__gearrange.last)) then
      (((Carsystem__gearrange.dynamic_property Carsystem__gearrange.first)
          Carsystem__gearrange.last)
         temp___expr_181)
    else true
  
  val dynamic_invariant (temp___expr_181: int) (temp___is_init_177: bool) (temp___skip_constant_178: bool) (temp___do_toplevel_179: bool) (temp___do_typ_inv_180: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_181 : int))
                      (temp___is_init_177 : bool))
                     (temp___skip_constant_178 : bool))
                    (temp___do_toplevel_179 : bool))
                   (temp___do_typ_inv_180 : bool)) }
  
  predicate default_initial_assumption (temp___expr_182: int) (temp___skip_top_level_183: bool) =
    true
  
  val default_initial_assumption (temp___expr_182: int) (temp___skip_top_level_183: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_182 : int))
                   (temp___skip_top_level_183 : bool)) }
end

module Carsystem__enterdiagmode__this___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Carsystem__enterdiagmode__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Carsystem__car as Carsystem__car
  use Carsystem__car___axiom as Carsystem__car___axiom
  use Carsystem__emergencystop___axiom as Carsystem__emergencystop___axiom
  use Carsystem__enterdiagmode__this as Carsystem__enterdiagmode__this
  use Carsystem__batterychargerange___axiom as Carsystem__batterychargerange___axiom
  use Carsystem__speedrange___axiom as Carsystem__speedrange___axiom
  use Carsystem__gearrange___axiom as Carsystem__gearrange___axiom
  use Carsystem__car___axiom as Carsystem__car___axiom
  use Carsystem__emergencystop___axiom as Carsystem__emergencystop___axiom
  use Carsystem__enterdiagmode__this___axiom as Carsystem__enterdiagmode__this___axiom
  
  let def (__void_param : unit)
    requires { [#"carsystem.ads" 88 0 0] true }
    ensures { [#"carsystem.ads" 88 0 0]
              [#"carsystem.ads" 89 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:carsystem.ads:89:14]
              [@GP_Shape:pragargs__cmp]
              [@model_vc_post]
              [@comment:     Post => this.isDiagMode = True;              ^ carsystem.ads:89:14:VC_POSTCONDITION]
              [@GP_Id:3]
              [@GP_Sloc:carsystem.ads:89:14]
              [@GP_Pretty_Ada:12538]
              ((((Carsystem__car.__split_fields
                     { Carsystem__car.__split_fields =
                         (Carsystem__car.__split_fields__content
                             Carsystem__enterdiagmode__this.this__split_fields) }).
                   Carsystem__car.rec__carsystem__car__isdiagmode)
                  = True) <->
                 true) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram carsystem.ads:88]
      ());
     assume {
       ((((Carsystem__car___axiom.dynamic_invariant
             { Carsystem__car.__split_fields =
                 (Carsystem__car.__split_fields__content
                     Carsystem__enterdiagmode__this.this__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram carsystem.ads:88]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram carsystem.ads:88]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram carsystem.ads:88] ());
     (try
        ([@GP_Sloc:carsystem.adb:137:7] [#"carsystem.adb" 137 0 0] ());
        ([@GP_Sloc:carsystem.adb:137:7]
         [#"carsystem.adb" 137 0 0]
         (let temp___compl_275 =
            { Carsystem__car.__split_fields =
                (Carsystem__car.__split_fields__content
                    Carsystem__enterdiagmode__this.this__split_fields) } in
          ([#"carsystem.adb" 137 0 0] (val _f : unit in
                                       _f));
          (Carsystem__emergencystop___axiom.emergencystop
             Carsystem__enterdiagmode__this.this__split_fields)));
        ([@GP_Sloc:carsystem.adb:138:23]
         [#"carsystem.adb" 138 0 0]
         (let temp___278 =
            let temp___277 =
              { Carsystem__car.__split_fields =
                  (Carsystem__car.__split_fields__content
                      Carsystem__enterdiagmode__this.this__split_fields) } in
            ([#"carsystem.adb" 138 0 0]
             (begin
                ensures { true }
                let _ =
                  let _ =
                    (Carsystem__car.__split_fields temp___277).Carsystem__car.rec__carsystem__car__isdiagmode in
                  () in
                ()
              end));
            ({ temp___277 with
               Carsystem__car.__split_fields =
                 ({ (Carsystem__car.__split_fields temp___277) with
                    Carsystem__car.rec__carsystem__car__isdiagmode =
                      (Boolean.of_int (1 : int)) }) }) in
          [#"carsystem.adb" 138 0 0]
          (Carsystem__enterdiagmode__this.this__split_fields.Carsystem__car.__split_fields__content <-
             (Carsystem__car.__split_fields temp___278))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Boolean.to_int
                ((Carsystem__car.__split_fields
                     { Carsystem__car.__split_fields =
                         (Carsystem__car.__split_fields__content
                             Carsystem__enterdiagmode__this.this__split_fields) }).
                   Carsystem__car.rec__carsystem__car__isdiagmode))
               = (Boolean.to_int (Boolean.of_int (1 : int)))) in
          () in
        ()
      end))
end
