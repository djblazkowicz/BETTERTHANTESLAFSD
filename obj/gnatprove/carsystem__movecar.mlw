module Carsystem__batterychargerange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type batterychargerange = <range 0 100>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (100 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = batterychargerange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type batterychargerange__ref = {
                                mutable batterychargerange__content :
                                  batterychargerange
                                }
  
  function batterychargerange__ref_batterychargerange__content__projection (a: batterychargerange__ref) : batterychargerange =
    a.batterychargerange__content
  
  meta "model_projection" function batterychargerange__ref_batterychargerange__content__projection
  
  meta "inline:no" function batterychargerange__ref_batterychargerange__content__projection
  
  val batterychargerange__havoc (x: batterychargerange__ref) : unit
    writes { x }
end

module Carsystem__batterychargerange__rep
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Carsystem__batterychargerange.batterychargerange) : int =
    Carsystem__batterychargerange.batterychargerange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Carsystem__batterychargerange.batterychargerange,
    predicate in_range = Carsystem__batterychargerange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Carsystem__speedrange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type speedrange = <range 0 100>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (100 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = speedrange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type speedrange__ref = { mutable speedrange__content : speedrange }
  
  function speedrange__ref_speedrange__content__projection (a: speedrange__ref) : speedrange =
    a.speedrange__content
  
  meta "model_projection" function speedrange__ref_speedrange__content__projection
  
  meta "inline:no" function speedrange__ref_speedrange__content__projection
  
  val speedrange__havoc (x: speedrange__ref) : unit
    writes { x }
end

module Carsystem__speedrange__rep
  use Carsystem__speedrange as Carsystem__speedrange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Carsystem__speedrange.speedrange) : int =
    Carsystem__speedrange.speedrange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Carsystem__speedrange.speedrange,
    predicate in_range = Carsystem__speedrange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Carsystem__gearrange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type gearrange = <range 0 2>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = gearrange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type gearrange__ref = { mutable gearrange__content : gearrange }
  
  function gearrange__ref_gearrange__content__projection (a: gearrange__ref) : gearrange =
    a.gearrange__content
  
  meta "model_projection" function gearrange__ref_gearrange__content__projection
  
  meta "inline:no" function gearrange__ref_gearrange__content__projection
  
  val gearrange__havoc (x: gearrange__ref) : unit
    writes { x }
end

module Carsystem__gearrange__rep
  use Carsystem__gearrange as Carsystem__gearrange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Carsystem__gearrange.gearrange) : int =
    Carsystem__gearrange.gearrange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Carsystem__gearrange.gearrange,
    predicate in_range = Carsystem__gearrange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Carsystem__car__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  use Carsystem__batterychargerange__rep as Carsystem__batterychargerange__rep
  use Carsystem__speedrange as Carsystem__speedrange
  use Carsystem__speedrange__rep as Carsystem__speedrange__rep
  use Carsystem__gearrange as Carsystem__gearrange
  use Carsystem__gearrange__rep as Carsystem__gearrange__rep
  
  type __split_fields = {
                       rec__carsystem__car__isstarted : bool;
                       rec__carsystem__car__sensordetect : bool;
                       rec__carsystem__car__isdiagmode : bool;
                       rec__carsystem__car__isbatterywarning : bool;
                       rec__carsystem__car__speed :
                         Carsystem__speedrange.speedrange;
                       rec__carsystem__car__battery :
                         Carsystem__batterychargerange.batterychargerange;
                       rec__carsystem__car__gear :
                         Carsystem__gearrange.gearrange
                       }
  
  function __split_fields_rec__carsystem__car__isstarted__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__isstarted
  
  meta "model_projection" function __split_fields_rec__carsystem__car__isstarted__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__isstarted__projection
  
  function __split_fields_rec__carsystem__car__sensordetect__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__sensordetect
  
  meta "model_projection" function __split_fields_rec__carsystem__car__sensordetect__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__sensordetect__projection
  
  function __split_fields_rec__carsystem__car__isdiagmode__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__isdiagmode
  
  meta "model_projection" function __split_fields_rec__carsystem__car__isdiagmode__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__isdiagmode__projection
  
  function __split_fields_rec__carsystem__car__isbatterywarning__projection (a: __split_fields) : bool =
    a.rec__carsystem__car__isbatterywarning
  
  meta "model_projection" function __split_fields_rec__carsystem__car__isbatterywarning__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__isbatterywarning__projection
  
  function __split_fields_rec__carsystem__car__speed__projection (a: __split_fields) : 
    Carsystem__speedrange.speedrange =
    a.rec__carsystem__car__speed
  
  meta "model_projection" function __split_fields_rec__carsystem__car__speed__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__speed__projection
  
  function __split_fields_rec__carsystem__car__battery__projection (a: __split_fields) : 
    Carsystem__batterychargerange.batterychargerange =
    a.rec__carsystem__car__battery
  
  meta "model_projection" function __split_fields_rec__carsystem__car__battery__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__battery__projection
  
  function __split_fields_rec__carsystem__car__gear__projection (a: __split_fields) : 
    Carsystem__gearrange.gearrange =
    a.rec__carsystem__car__gear
  
  meta "model_projection" function __split_fields_rec__carsystem__car__gear__projection
  
  meta "inline:no" function __split_fields_rec__carsystem__car__gear__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate carsystem__car__isstarted__pred (a: __rep) = true
  
  val carsystem__car__isstarted__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__isstarted__pred (a : __rep)) }
  
  val rec__carsystem__car__isstarted_ (a: __rep) : bool
    requires { carsystem__car__isstarted__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__isstarted)) }
  
  predicate carsystem__car__sensordetect__pred (a: __rep) = true
  
  val carsystem__car__sensordetect__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__sensordetect__pred (a : __rep)) }
  
  val rec__carsystem__car__sensordetect_ (a: __rep) : bool
    requires { carsystem__car__sensordetect__pred a }
    ensures { (result
                 = ((__split_fields a).rec__carsystem__car__sensordetect)) }
  
  predicate carsystem__car__isdiagmode__pred (a: __rep) = true
  
  val carsystem__car__isdiagmode__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__isdiagmode__pred (a : __rep)) }
  
  val rec__carsystem__car__isdiagmode_ (a: __rep) : bool
    requires { carsystem__car__isdiagmode__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__isdiagmode)) }
  
  predicate carsystem__car__isbatterywarning__pred (a: __rep) = true
  
  val carsystem__car__isbatterywarning__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__isbatterywarning__pred (a : __rep)) }
  
  val rec__carsystem__car__isbatterywarning_ (a: __rep) : bool
    requires { carsystem__car__isbatterywarning__pred a }
    ensures { (result
                 = ((__split_fields a).rec__carsystem__car__isbatterywarning)) }
  
  predicate carsystem__car__speed__pred (a: __rep) = true
  
  val carsystem__car__speed__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__speed__pred (a : __rep)) }
  
  val rec__carsystem__car__speed_ (a: __rep) : Carsystem__speedrange.speedrange
    requires { carsystem__car__speed__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__speed)) }
  
  predicate carsystem__car__battery__pred (a: __rep) = true
  
  val carsystem__car__battery__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__battery__pred (a : __rep)) }
  
  val rec__carsystem__car__battery_ (a: __rep) : Carsystem__batterychargerange.batterychargerange
    requires { carsystem__car__battery__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__battery)) }
  
  predicate carsystem__car__gear__pred (a: __rep) = true
  
  val carsystem__car__gear__pred (a: __rep) : bool
    ensures { result <-> (carsystem__car__gear__pred (a : __rep)) }
  
  val rec__carsystem__car__gear_ (a: __rep) : Carsystem__gearrange.gearrange
    requires { carsystem__car__gear__pred a }
    ensures { (result = ((__split_fields a).rec__carsystem__car__gear)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Boolean.to_int ((__split_fields a).rec__carsystem__car__isstarted))
            = (Boolean.to_int
                 ((__split_fields b).rec__carsystem__car__isstarted))) /\
           ((Boolean.to_int
               ((__split_fields a).rec__carsystem__car__sensordetect))
              = (Boolean.to_int
                   ((__split_fields b).rec__carsystem__car__sensordetect)))) /\
          (((((Boolean.to_int
                 ((__split_fields a).rec__carsystem__car__isdiagmode))
                = (Boolean.to_int
                     ((__split_fields b).rec__carsystem__car__isdiagmode))) /\
               ((Boolean.to_int
                   ((__split_fields a).rec__carsystem__car__isbatterywarning))
                  = (Boolean.to_int
                       ((__split_fields b).rec__carsystem__car__isbatterywarning)))) /\
              ((Carsystem__speedrange__rep.to_rep
                  ((__split_fields a).rec__carsystem__car__speed))
                 = (Carsystem__speedrange__rep.to_rep
                      ((__split_fields b).rec__carsystem__car__speed)))) /\
             (((Carsystem__batterychargerange__rep.to_rep
                  ((__split_fields a).rec__carsystem__car__battery))
                 = (Carsystem__batterychargerange__rep.to_rep
                      ((__split_fields b).rec__carsystem__car__battery))) /\
                ((Carsystem__gearrange__rep.to_rep
                    ((__split_fields a).rec__carsystem__car__gear))
                   = (Carsystem__gearrange__rep.to_rep
                        ((__split_fields b).rec__carsystem__car__gear)))))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Carsystem__car
  use export Carsystem__car__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type car = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function carsystem__car__isstarted__first__bit : int
  
  val function carsystem__car__isstarted__last__bit : int
  
  val function carsystem__car__isstarted__position : int
  
  axiom carsystem__car__isstarted__first__bit_axiom:
    (carsystem__car__isstarted__first__bit >= (0 : int))
  
  axiom carsystem__car__isstarted__last__bit_axiom:
    (carsystem__car__isstarted__last__bit
       > carsystem__car__isstarted__first__bit)
  
  axiom carsystem__car__isstarted__position_axiom:
    (carsystem__car__isstarted__position >= (0 : int))
  
  val function carsystem__car__sensordetect__first__bit : int
  
  val function carsystem__car__sensordetect__last__bit : int
  
  val function carsystem__car__sensordetect__position : int
  
  axiom carsystem__car__sensordetect__first__bit_axiom:
    (carsystem__car__sensordetect__first__bit >= (0 : int))
  
  axiom carsystem__car__sensordetect__last__bit_axiom:
    (carsystem__car__sensordetect__last__bit
       > carsystem__car__sensordetect__first__bit)
  
  axiom carsystem__car__sensordetect__position_axiom:
    (carsystem__car__sensordetect__position >= (0 : int))
  
  val function carsystem__car__isdiagmode__first__bit : int
  
  val function carsystem__car__isdiagmode__last__bit : int
  
  val function carsystem__car__isdiagmode__position : int
  
  axiom carsystem__car__isdiagmode__first__bit_axiom:
    (carsystem__car__isdiagmode__first__bit >= (0 : int))
  
  axiom carsystem__car__isdiagmode__last__bit_axiom:
    (carsystem__car__isdiagmode__last__bit
       > carsystem__car__isdiagmode__first__bit)
  
  axiom carsystem__car__isdiagmode__position_axiom:
    (carsystem__car__isdiagmode__position >= (0 : int))
  
  val function carsystem__car__isbatterywarning__first__bit : int
  
  val function carsystem__car__isbatterywarning__last__bit : int
  
  val function carsystem__car__isbatterywarning__position : int
  
  axiom carsystem__car__isbatterywarning__first__bit_axiom:
    (carsystem__car__isbatterywarning__first__bit >= (0 : int))
  
  axiom carsystem__car__isbatterywarning__last__bit_axiom:
    (carsystem__car__isbatterywarning__last__bit
       > carsystem__car__isbatterywarning__first__bit)
  
  axiom carsystem__car__isbatterywarning__position_axiom:
    (carsystem__car__isbatterywarning__position >= (0 : int))
  
  val function carsystem__car__speed__first__bit : int
  
  val function carsystem__car__speed__last__bit : int
  
  val function carsystem__car__speed__position : int
  
  axiom carsystem__car__speed__first__bit_axiom:
    (carsystem__car__speed__first__bit >= (0 : int))
  
  axiom carsystem__car__speed__last__bit_axiom:
    (carsystem__car__speed__last__bit > carsystem__car__speed__first__bit)
  
  axiom carsystem__car__speed__position_axiom:
    (carsystem__car__speed__position >= (0 : int))
  
  val function carsystem__car__battery__first__bit : int
  
  val function carsystem__car__battery__last__bit : int
  
  val function carsystem__car__battery__position : int
  
  axiom carsystem__car__battery__first__bit_axiom:
    (carsystem__car__battery__first__bit >= (0 : int))
  
  axiom carsystem__car__battery__last__bit_axiom:
    (carsystem__car__battery__last__bit
       > carsystem__car__battery__first__bit)
  
  axiom carsystem__car__battery__position_axiom:
    (carsystem__car__battery__position >= (0 : int))
  
  val function carsystem__car__gear__first__bit : int
  
  val function carsystem__car__gear__last__bit : int
  
  val function carsystem__car__gear__position : int
  
  axiom carsystem__car__gear__first__bit_axiom:
    (carsystem__car__gear__first__bit >= (0 : int))
  
  axiom carsystem__car__gear__last__bit_axiom:
    (carsystem__car__gear__last__bit > carsystem__car__gear__first__bit)
  
  axiom carsystem__car__gear__position_axiom:
    (carsystem__car__gear__position >= (0 : int))
  
  val function user_eq (a: car) (b: car) : bool
  
  val function dummy : car
  
  type car__ref = { mutable car__content : car }
  
  function car__ref_car__content__projection (a: car__ref) : car =
    a.car__content
  
  meta "model_projection" function car__ref_car__content__projection
  
  meta "inline:no" function car__ref_car__content__projection
  
  val car__havoc (x: car__ref) : unit
    writes { x }
end

module Carsystem__car___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Carsystem__car as Carsystem__car
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  use Carsystem__batterychargerange__rep as Carsystem__batterychargerange__rep
  use Carsystem__speedrange as Carsystem__speedrange
  use Carsystem__speedrange__rep as Carsystem__speedrange__rep
  use Carsystem__gearrange as Carsystem__gearrange
  use Carsystem__gearrange__rep as Carsystem__gearrange__rep
  
  predicate dynamic_invariant (temp___expr_186: Carsystem__car.car) (temp___is_init_182: bool) (temp___skip_constant_183: bool) (temp___do_toplevel_184: bool) (temp___do_typ_inv_185: bool) =
    true
  
  val dynamic_invariant (temp___expr_186: Carsystem__car.car) (temp___is_init_182: bool) (temp___skip_constant_183: bool) (temp___do_toplevel_184: bool) (temp___do_typ_inv_185: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_186 : Carsystem__car.car))
                      (temp___is_init_182 : bool))
                     (temp___skip_constant_183 : bool))
                    (temp___do_toplevel_184 : bool))
                   (temp___do_typ_inv_185 : bool)) }
  
  predicate default_initial_assumption (temp___expr_187: Carsystem__car.car) (temp___skip_top_level_188: bool) =
    (((if (Carsystem__car.carsystem__car__isstarted__pred temp___expr_187) then
         (((Carsystem__car.__split_fields temp___expr_187).Carsystem__car.rec__carsystem__car__isstarted)
            = (Boolean.of_int (0 : int)))
       else true) /\
        (if (Carsystem__car.carsystem__car__sensordetect__pred
               temp___expr_187) then
           (((Carsystem__car.__split_fields temp___expr_187).Carsystem__car.rec__carsystem__car__sensordetect)
              = (Boolean.of_int (0 : int)))
         else true)) /\
       ((((if (Carsystem__car.carsystem__car__isdiagmode__pred
                 temp___expr_187) then
             (((Carsystem__car.__split_fields temp___expr_187).Carsystem__car.rec__carsystem__car__isdiagmode)
                = (Boolean.of_int (0 : int)))
           else true) /\
            (if (Carsystem__car.carsystem__car__isbatterywarning__pred
                   temp___expr_187) then
               (((Carsystem__car.__split_fields temp___expr_187).Carsystem__car.rec__carsystem__car__isbatterywarning)
                  = (Boolean.of_int (0 : int)))
             else true)) /\
           (if (Carsystem__car.carsystem__car__speed__pred temp___expr_187) then
              ((Carsystem__speedrange__rep.to_rep
                  ((Carsystem__car.__split_fields temp___expr_187).Carsystem__car.rec__carsystem__car__speed))
                 = (0 : int))
            else true)) /\
          ((if (Carsystem__car.carsystem__car__battery__pred temp___expr_187) then
              ((Carsystem__batterychargerange__rep.to_rep
                  ((Carsystem__car.__split_fields temp___expr_187).Carsystem__car.rec__carsystem__car__battery))
                 = (0 : int))
            else true) /\
             (if (Carsystem__car.carsystem__car__gear__pred temp___expr_187) then
                ((Carsystem__gearrange__rep.to_rep
                    ((Carsystem__car.__split_fields temp___expr_187).
                       Carsystem__car.rec__carsystem__car__gear))
                   = (0 : int))
              else true))))
  
  val default_initial_assumption (temp___expr_187: Carsystem__car.car) (temp___skip_top_level_188: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_187 : Carsystem__car.car))
                   (temp___skip_top_level_188 : bool)) }
end

module Carsystem__checkbatterywarning___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Carsystem__car as Carsystem__car
  use Carsystem__car___axiom as Carsystem__car___axiom
  
  val checkbatterywarning (this__split_fields: Carsystem__car.__split_fields__ref) : 
    unit
    requires { true }
    writes { this__split_fields }
    ensures { ((((Carsystem__car___axiom.dynamic_invariant
                    { Carsystem__car.__split_fields =
                        (Carsystem__car.__split_fields__content
                            this__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Carsystem__objectahead
  use _gnatprove_standard.Main
  use int.Int
  
  val objectahead : bool__ref
end

module Carsystem__objectbehind
  use _gnatprove_standard.Main
  use int.Int
  
  val objectbehind : bool__ref
end

module Carsystem__checksensor___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Carsystem__objectahead as Carsystem__objectahead
  use Carsystem__objectbehind as Carsystem__objectbehind
  use Carsystem__car as Carsystem__car
  use Carsystem__car___axiom as Carsystem__car___axiom
  
  val checksensor (this__split_fields: Carsystem__car.__split_fields__ref) : 
    unit
    reads { Carsystem__objectahead.objectahead,
      Carsystem__objectbehind.objectbehind }
    requires { true }
    writes { this__split_fields }
    ensures { ((((Carsystem__car___axiom.dynamic_invariant
                    { Carsystem__car.__split_fields =
                        (Carsystem__car.__split_fields__content
                            this__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Carsystem__movecar__this
  use _gnatprove_standard.Main
  use int.Int
  use Carsystem__car as Carsystem__car
  
  val this__split_fields : Carsystem__car.__split_fields__ref
end

module Carsystem__movecar__targetspeed
  use _gnatprove_standard.Main
  use int.Int
  
  val function targetspeed : int
end

module Carsystem__emergencystop___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__car as Carsystem__car
  use Carsystem__car___axiom as Carsystem__car___axiom
  use Carsystem__speedrange as Carsystem__speedrange
  use Carsystem__speedrange__rep as Carsystem__speedrange__rep
  
  val emergencystop (this__split_fields: Carsystem__car.__split_fields__ref) : 
    unit
    requires { true }
    writes { this__split_fields }
    ensures { (([@GP_Pretty_Ada:1722]
                ((Carsystem__speedrange__rep.to_rep
                    ((Carsystem__car.__split_fields
                         { Carsystem__car.__split_fields =
                             (Carsystem__car.__split_fields__content
                                 this__split_fields) }).Carsystem__car.rec__carsystem__car__speed))
                   = (0 : int))) /\
                 (((((Carsystem__car___axiom.dynamic_invariant
                        { Carsystem__car.__split_fields =
                            (Carsystem__car.__split_fields__content
                                this__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Carsystem__speedrange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__speedrange as Carsystem__speedrange
  
  predicate dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) =
    if ((temp___is_init_168 = True) \/
          (Carsystem__speedrange.first <= Carsystem__speedrange.last)) then
      (((Carsystem__speedrange.dynamic_property Carsystem__speedrange.first)
          Carsystem__speedrange.last)
         temp___expr_172)
    else true
  
  val dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_172 : int))
                      (temp___is_init_168 : bool))
                     (temp___skip_constant_169 : bool))
                    (temp___do_toplevel_170 : bool))
                   (temp___do_typ_inv_171 : bool)) }
  
  predicate default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) =
    true
  
  val default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_173 : int))
                   (temp___skip_top_level_174 : bool)) }
end

module Carsystem__batterychargerange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  
  predicate dynamic_invariant (temp___expr_165: int) (temp___is_init_161: bool) (temp___skip_constant_162: bool) (temp___do_toplevel_163: bool) (temp___do_typ_inv_164: bool) =
    if ((temp___is_init_161 = True) \/
          (Carsystem__batterychargerange.first
             <= Carsystem__batterychargerange.last)) then
      (((Carsystem__batterychargerange.dynamic_property
           Carsystem__batterychargerange.first)
          Carsystem__batterychargerange.last)
         temp___expr_165)
    else true
  
  val dynamic_invariant (temp___expr_165: int) (temp___is_init_161: bool) (temp___skip_constant_162: bool) (temp___do_toplevel_163: bool) (temp___do_typ_inv_164: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_165 : int))
                      (temp___is_init_161 : bool))
                     (temp___skip_constant_162 : bool))
                    (temp___do_toplevel_163 : bool))
                   (temp___do_typ_inv_164 : bool)) }
  
  predicate default_initial_assumption (temp___expr_166: int) (temp___skip_top_level_167: bool) =
    true
  
  val default_initial_assumption (temp___expr_166: int) (temp___skip_top_level_167: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_166 : int))
                   (temp___skip_top_level_167 : bool)) }
end

module Carsystem__objectahead___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Carsystem__objectbehind___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Carsystem__gearrange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Carsystem__gearrange as Carsystem__gearrange
  
  predicate dynamic_invariant (temp___expr_179: int) (temp___is_init_175: bool) (temp___skip_constant_176: bool) (temp___do_toplevel_177: bool) (temp___do_typ_inv_178: bool) =
    if ((temp___is_init_175 = True) \/
          (Carsystem__gearrange.first <= Carsystem__gearrange.last)) then
      (((Carsystem__gearrange.dynamic_property Carsystem__gearrange.first)
          Carsystem__gearrange.last)
         temp___expr_179)
    else true
  
  val dynamic_invariant (temp___expr_179: int) (temp___is_init_175: bool) (temp___skip_constant_176: bool) (temp___do_toplevel_177: bool) (temp___do_typ_inv_178: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_179 : int))
                      (temp___is_init_175 : bool))
                     (temp___skip_constant_176 : bool))
                    (temp___do_toplevel_177 : bool))
                   (temp___do_typ_inv_178 : bool)) }
  
  predicate default_initial_assumption (temp___expr_180: int) (temp___skip_top_level_181: bool) =
    true
  
  val default_initial_assumption (temp___expr_180: int) (temp___skip_top_level_181: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_180 : int))
                   (temp___skip_top_level_181 : bool)) }
end

module Carsystem__movecar__this___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Carsystem__movecar__targetspeed___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Carsystem__movecar__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Carsystem__car as Carsystem__car
  use Carsystem__car___axiom as Carsystem__car___axiom
  use Carsystem__checkbatterywarning___axiom as Carsystem__checkbatterywarning___axiom
  use Carsystem__checksensor___axiom as Carsystem__checksensor___axiom
  use Carsystem__movecar__this as Carsystem__movecar__this
  use Carsystem__movecar__targetspeed as Carsystem__movecar__targetspeed
  use Carsystem__emergencystop___axiom as Carsystem__emergencystop___axiom
  use Carsystem__batterychargerange as Carsystem__batterychargerange
  use Carsystem__batterychargerange__rep as Carsystem__batterychargerange__rep
  use Carsystem__speedrange as Carsystem__speedrange
  use Carsystem__speedrange___axiom as Carsystem__speedrange___axiom
  use Carsystem__speedrange__rep as Carsystem__speedrange__rep
  use Carsystem__gearrange as Carsystem__gearrange
  use Carsystem__gearrange__rep as Carsystem__gearrange__rep
  use Carsystem__batterychargerange___axiom as Carsystem__batterychargerange___axiom
  use Carsystem__speedrange___axiom as Carsystem__speedrange___axiom
  use Carsystem__objectahead___axiom as Carsystem__objectahead___axiom
  use Carsystem__objectbehind___axiom as Carsystem__objectbehind___axiom
  use Carsystem__gearrange___axiom as Carsystem__gearrange___axiom
  use Carsystem__car___axiom as Carsystem__car___axiom
  use Carsystem__checkbatterywarning___axiom as Carsystem__checkbatterywarning___axiom
  use Carsystem__checksensor___axiom as Carsystem__checksensor___axiom
  use Carsystem__movecar__this___axiom as Carsystem__movecar__this___axiom
  use Carsystem__movecar__targetspeed___axiom as Carsystem__movecar__targetspeed___axiom
  use Carsystem__emergencystop___axiom as Carsystem__emergencystop___axiom
  
  let def (__void_param : unit)
    requires { [#"carsystem.ads" 62 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram carsystem.ads:62]
      ());
     ([#"carsystem.ads" 62 0 0]
      assume {
        [#"carsystem.ads" 62 0 0]
        (((((Carsystem__car___axiom.dynamic_invariant
               { Carsystem__car.__split_fields =
                   (Carsystem__car.__split_fields__content
                       Carsystem__movecar__this.this__split_fields) })
              True)
             False)
            True)
           True) });
     ([#"carsystem.ads" 62 0 0]
      assume {
        [#"carsystem.ads" 62 0 0]
        (((((Carsystem__speedrange___axiom.dynamic_invariant
               Carsystem__movecar__targetspeed.targetspeed)
              True)
             False)
            True)
           True) });
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram carsystem.ads:62]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram carsystem.ads:62]
      ());
     ([#"carsystem.ads" 62 0 0]
      (begin
         ensures { true }
         let _ =
           let _ =
             (Boolean.andb
                ((Boolean.andb
                    ((Boolean.andb
                        ((Boolean.andb
                            ((Boolean.andb
                                ((Boolean.andb
                                    ((Boolean.to_int
                                        ((Carsystem__car.__split_fields
                                             { Carsystem__car.__split_fields =
                                                 (Carsystem__car.__split_fields__content
                                                     Carsystem__movecar__this.this__split_fields) }).
                                           Carsystem__car.rec__carsystem__car__isstarted))
                                       = (Boolean.to_int
                                            (Boolean.of_int (1 : int)))))
                                   ((Boolean.to_int
                                       ((Carsystem__car.__split_fields
                                            { Carsystem__car.__split_fields =
                                                (Carsystem__car.__split_fields__content
                                                    Carsystem__movecar__this.this__split_fields) }).
                                          Carsystem__car.rec__carsystem__car__isdiagmode))
                                      = (Boolean.to_int
                                           (Boolean.of_int (0 : int))))))
                               ((Boolean.to_int
                                   ((Carsystem__car.__split_fields
                                        { Carsystem__car.__split_fields =
                                            (Carsystem__car.__split_fields__content
                                                Carsystem__movecar__this.this__split_fields) }).
                                      Carsystem__car.rec__carsystem__car__sensordetect))
                                  = (Boolean.to_int
                                       (Boolean.of_int (0 : int))))))
                           ((Boolean.to_int
                               ((Carsystem__car.__split_fields
                                    { Carsystem__car.__split_fields =
                                        (Carsystem__car.__split_fields__content
                                            Carsystem__movecar__this.this__split_fields) }).
                                  Carsystem__car.rec__carsystem__car__isbatterywarning))
                              = (Boolean.to_int (Boolean.of_int (0 : int))))))
                       ((Carsystem__gearrange__rep.to_rep
                           ((Carsystem__car.__split_fields
                                { Carsystem__car.__split_fields =
                                    (Carsystem__car.__split_fields__content
                                        Carsystem__movecar__this.this__split_fields) }).
                              Carsystem__car.rec__carsystem__car__gear))
                          > (0 : int))))
                   (Carsystem__movecar__targetspeed.targetspeed >= (0 : int))))
               (Carsystem__movecar__targetspeed.targetspeed <= (100 : int)) in
           () in
         ()
       end));
     ([@GNAT-comment:Assume Pre of the subprogram carsystem.ads:62] ());
     ([#"carsystem.ads" 62 0 0]
      assume {
        [#"carsystem.ads" 62 0 0]
        ((((((([@GP_Pretty_Ada:1448]
               ((((Carsystem__car.__split_fields
                      { Carsystem__car.__split_fields =
                          (Carsystem__car.__split_fields__content
                              Carsystem__movecar__this.this__split_fields) }).
                    Carsystem__car.rec__carsystem__car__isstarted)
                   = True) <->
                  true)) /\
                ([@GP_Pretty_Ada:1454]
                 ((((Carsystem__car.__split_fields
                        { Carsystem__car.__split_fields =
                            (Carsystem__car.__split_fields__content
                                Carsystem__movecar__this.this__split_fields) }).
                      Carsystem__car.rec__carsystem__car__isdiagmode)
                     = True) <->
                    false))) /\
               ([@GP_Pretty_Ada:1460]
                ((((Carsystem__car.__split_fields
                       { Carsystem__car.__split_fields =
                           (Carsystem__car.__split_fields__content
                               Carsystem__movecar__this.this__split_fields) }).
                     Carsystem__car.rec__carsystem__car__sensordetect)
                    = True) <->
                   false))) /\
              ([@GP_Pretty_Ada:1466]
               ((((Carsystem__car.__split_fields
                      { Carsystem__car.__split_fields =
                          (Carsystem__car.__split_fields__content
                              Carsystem__movecar__this.this__split_fields) }).
                    Carsystem__car.rec__carsystem__car__isbatterywarning)
                   = True) <->
                  false))) /\
             ([@GP_Pretty_Ada:1472]
              ((Carsystem__gearrange__rep.to_rep
                  ((Carsystem__car.__split_fields
                       { Carsystem__car.__split_fields =
                           (Carsystem__car.__split_fields__content
                               Carsystem__movecar__this.this__split_fields) }).
                     Carsystem__car.rec__carsystem__car__gear))
                 > (0 : int)))) /\
            ([@GP_Pretty_Ada:1476]
             (Carsystem__movecar__targetspeed.targetspeed >= (0 : int)))) /\
           ([@GP_Pretty_Ada:1482]
            (Carsystem__movecar__targetspeed.targetspeed <= (100 : int)))) });
     ([#"carsystem.ads" 62 0 0]
      (try
         ([@GP_Sloc:carsystem.adb:57:7] [#"carsystem.adb" 57 0 0] ());
         ([@GP_Sloc:carsystem.adb:57:7]
          [#"carsystem.adb" 57 0 0]
          (let temp___compl_217 =
             { Carsystem__car.__split_fields =
                 (Carsystem__car.__split_fields__content
                     Carsystem__movecar__this.this__split_fields) } in
           ([#"carsystem.adb" 57 0 0] (val _f : unit in
                                       _f));
           (Carsystem__checkbatterywarning___axiom.checkbatterywarning
              Carsystem__movecar__this.this__split_fields)));
         ([@GP_Sloc:carsystem.adb:60:7] [#"carsystem.adb" 60 0 0] ());
         ([@GP_Sloc:carsystem.adb:60:7]
          [#"carsystem.adb" 60 0 0]
          (let temp___compl_218 =
             { Carsystem__car.__split_fields =
                 (Carsystem__car.__split_fields__content
                     Carsystem__movecar__this.this__split_fields) } in
           ([#"carsystem.adb" 60 0 0] (val _f : unit in
                                       _f));
           (Carsystem__checksensor___axiom.checksensor
              Carsystem__movecar__this.this__split_fields)));
         ([@GP_Sloc:carsystem.adb:61:7]
          [#"carsystem.adb" 61 0 0]
          (if (([#"carsystem.adb" 61 0 0]
                [#"carsystem.adb" 61 0 0]
                (([@branch_id=1031] Main.spark__branch).bool__content <-
                   ((Boolean.to_int
                       ((Carsystem__car.__split_fields
                            { Carsystem__car.__split_fields =
                                (Carsystem__car.__split_fields__content
                                    Carsystem__movecar__this.this__split_fields) }).
                          Carsystem__car.rec__carsystem__car__sensordetect))
                      = (Boolean.to_int (Boolean.of_int (1 : int))))));
               (([@branch_id=1031] Main.spark__branch).bool__content)) then
             (([@GP_Sloc:carsystem.adb:62:10] [#"carsystem.adb" 62 0 0] ());
              ([@GP_Sloc:carsystem.adb:62:10]
               [#"carsystem.adb" 62 0 0]
               (let temp___compl_219 =
                  { Carsystem__car.__split_fields =
                      (Carsystem__car.__split_fields__content
                          Carsystem__movecar__this.this__split_fields) } in
                ([#"carsystem.adb" 62 0 0] (val _f : unit in
                                            _f));
                (Carsystem__emergencystop___axiom.emergencystop
                   Carsystem__movecar__this.this__split_fields)));
              ([@GP_Sloc:carsystem.adb:63:10]
               [#"carsystem.adb" 63 0 0]
               [#"carsystem.adb" 63 0 0] ((raise Return__exc) : unit)))
           else ()));
         ([@GP_Sloc:carsystem.adb:66:7]
          [#"carsystem.adb" 66 0 0]
          (if (([#"carsystem.adb" 66 0 0]
                [#"carsystem.adb" 66 0 0]
                (([@branch_id=1042] Main.spark__branch).bool__content <-
                   ((Boolean.to_int
                       ((Carsystem__car.__split_fields
                            { Carsystem__car.__split_fields =
                                (Carsystem__car.__split_fields__content
                                    Carsystem__movecar__this.this__split_fields) }).
                          Carsystem__car.rec__carsystem__car__isbatterywarning))
                      = (Boolean.to_int (Boolean.of_int (1 : int))))));
               (([@branch_id=1042] Main.spark__branch).bool__content)) then
             ([@GP_Sloc:carsystem.adb:67:21]
              [#"carsystem.adb" 67 0 0]
              (let temp___222 =
                 let temp___221 =
                   { Carsystem__car.__split_fields =
                       (Carsystem__car.__split_fields__content
                           Carsystem__movecar__this.this__split_fields) } in
                 ([#"carsystem.adb" 67 0 0]
                  (begin
                     ensures { true }
                     let _ =
                       let _ =
                         (Carsystem__car.__split_fields temp___221).Carsystem__car.rec__carsystem__car__speed in
                       () in
                     ()
                   end));
                 ({ temp___221 with
                    Carsystem__car.__split_fields =
                      ({ (Carsystem__car.__split_fields temp___221) with
                         Carsystem__car.rec__carsystem__car__speed =
                           (0 : Carsystem__speedrange.speedrange) }) }) in
               [#"carsystem.adb" 67 0 0]
               (Carsystem__movecar__this.this__split_fields.Carsystem__car.__split_fields__content <-
                  (Carsystem__car.__split_fields temp___222))))
           else ()));
         ([@GP_Sloc:carsystem.adb:69:7]
          [#"carsystem.adb" 69 0 0]
          (if (([#"carsystem.adb" 69 0 0]
                [#"carsystem.adb" 69 0 0]
                (([@branch_id=1054] Main.spark__branch).bool__content <-
                   ((Boolean.andb
                       ((Boolean.andb
                           ((Boolean.andb
                               ((Boolean.andb
                                   ((Boolean.andb
                                       ((Boolean.andb
                                           ((Boolean.to_int
                                               ((Carsystem__car.__split_fields
                                                    { Carsystem__car.__split_fields =
                                                        (Carsystem__car.__split_fields__content
                                                            Carsystem__movecar__this.this__split_fields) }).
                                                  Carsystem__car.rec__carsystem__car__isstarted))
                                              = (Boolean.to_int
                                                   (Boolean.of_int (1 : int)))))
                                          ((Boolean.to_int
                                              ((Carsystem__car.__split_fields
                                                   { Carsystem__car.__split_fields =
                                                       (Carsystem__car.__split_fields__content
                                                           Carsystem__movecar__this.this__split_fields) }).
                                                 Carsystem__car.rec__carsystem__car__isdiagmode))
                                             = (Boolean.to_int
                                                  (Boolean.of_int (0 : int))))))
                                      ((Boolean.to_int
                                          ((Carsystem__car.__split_fields
                                               { Carsystem__car.__split_fields =
                                                   (Carsystem__car.__split_fields__content
                                                       Carsystem__movecar__this.this__split_fields) }).
                                             Carsystem__car.rec__carsystem__car__sensordetect))
                                         = (Boolean.to_int
                                              (Boolean.of_int (0 : int))))))
                                  ((Boolean.to_int
                                      ((Carsystem__car.__split_fields
                                           { Carsystem__car.__split_fields =
                                               (Carsystem__car.__split_fields__content
                                                   Carsystem__movecar__this.this__split_fields) }).
                                         Carsystem__car.rec__carsystem__car__isbatterywarning))
                                     = (Boolean.to_int
                                          (Boolean.of_int (0 : int))))))
                              ((Carsystem__gearrange__rep.to_rep
                                  ((Carsystem__car.__split_fields
                                       { Carsystem__car.__split_fields =
                                           (Carsystem__car.__split_fields__content
                                               Carsystem__movecar__this.this__split_fields) }).
                                     Carsystem__car.rec__carsystem__car__gear))
                                 > (0 : int))))
                          (Carsystem__movecar__targetspeed.targetspeed
                             >= (0 : int))))
                      (Carsystem__movecar__targetspeed.targetspeed
                         <= (100 : int)))));
               (([@branch_id=1054] Main.spark__branch).bool__content)) then
             (([@GP_Sloc:carsystem.adb:76:10]
               [#"carsystem.adb" 76 0 0]
               (if (([#"carsystem.adb" 76 0 0]
                     [#"carsystem.adb" 76 0 0]
                     (([@branch_id=1097] Main.spark__branch).bool__content <-
                        (Carsystem__movecar__targetspeed.targetspeed
                           > (70 : int))));
                    (([@branch_id=1097] Main.spark__branch).bool__content)) then
                  ([@GP_Sloc:carsystem.adb:77:24]
                   [#"carsystem.adb" 77 0 0]
                   (let temp___225 =
                      let temp___224 =
                        { Carsystem__car.__split_fields =
                            (Carsystem__car.__split_fields__content
                                Carsystem__movecar__this.this__split_fields) } in
                      ([#"carsystem.adb" 77 0 0]
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              (Carsystem__car.__split_fields temp___224).
                                Carsystem__car.rec__carsystem__car__speed in
                            () in
                          ()
                        end));
                      ({ temp___224 with
                         Carsystem__car.__split_fields =
                           ({ (Carsystem__car.__split_fields temp___224) with
                              Carsystem__car.rec__carsystem__car__speed =
                                (70 : Carsystem__speedrange.speedrange) }) }) in
                    [#"carsystem.adb" 77 0 0]
                    (Carsystem__movecar__this.this__split_fields.Carsystem__car.__split_fields__content <-
                       (Carsystem__car.__split_fields temp___225))))
                else
                  ([@GP_Sloc:carsystem.adb:79:24]
                   [#"carsystem.adb" 79 0 0]
                   (let temp___228 =
                      let temp___227 =
                        { Carsystem__car.__split_fields =
                            (Carsystem__car.__split_fields__content
                                Carsystem__movecar__this.this__split_fields) } in
                      ([#"carsystem.adb" 79 0 0]
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              (Carsystem__car.__split_fields temp___227).
                                Carsystem__car.rec__carsystem__car__speed in
                            () in
                          ()
                        end));
                      ({ temp___227 with
                         Carsystem__car.__split_fields =
                           ({ (Carsystem__car.__split_fields temp___227) with
                              Carsystem__car.rec__carsystem__car__speed =
                                (Carsystem__speedrange__rep.of_rep
                                   Carsystem__movecar__targetspeed.targetspeed) }) }) in
                    [#"carsystem.adb" 79 0 0]
                    (Carsystem__movecar__this.this__split_fields.Carsystem__car.__split_fields__content <-
                       (Carsystem__car.__split_fields temp___228))))));
              ([@GP_Sloc:carsystem.adb:81:10]
               [#"carsystem.adb" 81 0 0]
               (if (([#"carsystem.adb" 81 0 0]
                     [#"carsystem.adb" 81 0 0]
                     (([@branch_id=1113] Main.spark__branch).bool__content <-
                        ((Boolean.andb
                            ((Carsystem__speedrange__rep.to_rep
                                ((Carsystem__car.__split_fields
                                     { Carsystem__car.__split_fields =
                                         (Carsystem__car.__split_fields__content
                                             Carsystem__movecar__this.this__split_fields) }).
                                   Carsystem__car.rec__carsystem__car__speed))
                               < (0 : int)))
                           ((Carsystem__batterychargerange__rep.to_rep
                               ((Carsystem__car.__split_fields
                                    { Carsystem__car.__split_fields =
                                        (Carsystem__car.__split_fields__content
                                            Carsystem__movecar__this.this__split_fields) }).
                                  Carsystem__car.rec__carsystem__car__battery))
                              < (5 : int)))));
                    (([@branch_id=1113] Main.spark__branch).bool__content)) then
                  ([@GP_Sloc:carsystem.adb:83:26]
                   [#"carsystem.adb" 83 0 0]
                   (let temp___231 =
                      let temp___230 =
                        { Carsystem__car.__split_fields =
                            (Carsystem__car.__split_fields__content
                                Carsystem__movecar__this.this__split_fields) } in
                      ([#"carsystem.adb" 83 0 0]
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              (Carsystem__car.__split_fields temp___230).
                                Carsystem__car.rec__carsystem__car__battery in
                            () in
                          ()
                        end));
                      ({ temp___230 with
                         Carsystem__car.__split_fields =
                           ({ (Carsystem__car.__split_fields temp___230) with
                              Carsystem__car.rec__carsystem__car__battery =
                                (Carsystem__batterychargerange__rep.of_rep
                                   ([#"carsystem.adb" 83 0 0]
                                    [@GP_Sloc:carsystem.adb:83:42]
                                    [@vc:annotation]
                                    [@comment:            This.battery := This.battery - 1;                                          ^ carsystem.adb:83:42:VC_RANGE_CHECK]
                                    [@GP_Reason:VC_RANGE_CHECK]
                                    [@GP_Shape:if__if__this_assign__sub]
                                    [@GP_Id:0]
                                    (Carsystem__batterychargerange.range_check_
                                       ((Carsystem__batterychargerange__rep.to_rep
                                           ((Carsystem__car.__split_fields
                                                { Carsystem__car.__split_fields =
                                                    (Carsystem__car.__split_fields__content
                                                        Carsystem__movecar__this.this__split_fields) }).
                                              Carsystem__car.rec__carsystem__car__battery))
                                          - (1 : int))))) }) }) in
                    Carsystem__movecar__this.this__split_fields.Carsystem__car.__split_fields__content <-
                      (Carsystem__car.__split_fields temp___231)))
                else ())))
           else ()));
         ([@GP_Sloc:carsystem.adb:87:7] [#"carsystem.adb" 87 0 0] ());
         ([@GP_Sloc:carsystem.adb:87:7]
          [#"carsystem.adb" 87 0 0]
          (let temp___compl_232 =
             { Carsystem__car.__split_fields =
                 (Carsystem__car.__split_fields__content
                     Carsystem__movecar__this.this__split_fields) } in
           ([#"carsystem.adb" 87 0 0] (val _f : unit in
                                       _f));
           (Carsystem__checkbatterywarning___axiom.checkbatterywarning
              Carsystem__movecar__this.this__split_fields)));
         (raise Return__exc)
       with Return__exc -> ()
       end)))
end
